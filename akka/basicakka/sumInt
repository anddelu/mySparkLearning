/**
 * Created by Administrator on 2016/1/17.
 * 文章见下面的链接：
 * http://zhuanlan.zhihu.com/guagua/20009659
 */

// Akka 并发计算实例
import akka.actor.{Actor, Props, ActorSystem}
import akka.routing.RoundRobinPool

// 定义一个case类
sealed trait SumTrait
case class Result(value: Int) extends SumTrait

// 计算用的Actor
class SumActor extends Actor {
  val RANGE = 10000

  def calculate(start: Int, end: Int, flag: String): Int = {
    var cal = 0
    // 将下面的for loop改为while loop，嵌套的for 改为 while后，在自己的机器上，之前80s左右，立马变为6s之内。
    /*
    for (i <- (start to end)) {
      for (j <- 1 to 3000000) {}
      cal += i
    }
    */
    var i = start
    while (i <= end) {
      var j = 0
      while (j < 3000000) {j += 1}
      cal += i
      i += 1
    }
    println("flag: " + flag + ".")
    cal
  }

  def receive = {
    case value: Int =>
      sender ! Result(calculate((RANGE / 4) * (value-1) + 1, (RANGE / 4) * value, value.toString))
    case _ => println("未知 in SumActor")
  }
}

// 打印结果用的Actor
class PrintActor extends Actor {
  def receive = {
    case (sum: Int, startTime: Long) =>
      println("总数为： " + sum + "; 所花时间为： " + (System.nanoTime() - startTime)/1000000000.0 + "秒。")
    case _ =>println("未知 in PrintActor")
  }
}

// 主Actor，发送计算指令给SumActor，发送打印指令给PrintActor
class MasterActor extends Actor {
  var sum = 0
  var count = 0
  var startTime: Long = 0

  // 声明Actor实例，nrOfInstances是pool里所启动routee（SumActor）的数量
  val sumActor = context.actorOf(Props[SumActor].withRouter(RoundRobinPool(nrOfInstances = 4)), name = "sumActor")
  val printActor = context.actorOf(Props[PrintActor], name = "printActor")

  def receive = {
    case "calculate..." =>
      startTime = System.nanoTime()
      for (i <- 1 to 4) sumActor ! i
    case Result(value) =>
      sum += value
      count += 1
      if (count == 4) {
        printActor ! (sum, startTime)
        context.stop(self)
        //self ! PoisonPill
        import sumInt._
        system.shutdown()
      }
    case _ => println("未知 in MasterActor...")
  }
}

object sumInt {

  val system = ActorSystem("MasterActor-System")

  def main(args: Array[String]) {
    var sum = 0
    //val system = ActorSystem("MasterActor-System")
    val masterActor = system.actorOf(Props[MasterActor], name = "masterActor")
    masterActor ! "calculate..."

    Thread.sleep(5000)
    //由于已经在 MasterActor.receive.case 定义中的 Result里有 shutdown 了，因此下面的语句都可以注释掉了
    //system.awaitTermination()
    //上一句替换了原文章中的system.shutdown，并把该句挪到 MasterActor.receive.case 定义中的 Result里，不然会一直等待吧。
    //system.shutdown()

    val startTime = System.nanoTime()
    val test00 = Range(1, 100000).sum
    val test01 = Range(1, 100000).par.sum
    //println(s"the result of sum: $test00")
    println(s"the result of sum: $test00" + "; 所花时间为： " + (System.nanoTime() - startTime)/1000000000.0 + "秒。")
  }

}

