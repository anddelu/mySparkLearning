/**
 * Created by Administrator on 2015/12/13.
 */
import scala.io.Source
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.ArrayBuffer
import com.github.tototoshi.csv._
import java.io.File
import java.io.BufferedWriter
import java.io.FileWriter

object trs_com_dataPorcess01 {
  def main(args: Array[String]) {

    //val src1 = CSVReader.open("d:/plat1.csv", "ISO-8859-1")
    //val src1 = CSVReader.open("d:/plat4.csv")
    val src1 = CSVReader.open("D:/全部数据/平台1.csv")
    val it = src1.iterator
    //val test00 = it.next().toArray
    //println(test00)
    //val test01 = test00
    //println(test00.length)

    //val listbu1: ListBuffer[String] = new ListBuffer()
    val listbu1: ArrayBuffer[Array[String]] = new ArrayBuffer()
    val headStr = it.next()

    if (!headStr.contains("RELEASETIME"))
      listbu1.append(headStr.toArray)

    while (it.hasNext) {
      listbu1.append(it.next().toArray)
    }

    val test00 = listbu1.map(_.size).distinct
    val test01 = listbu1.slice(0, 2).map(arr => arr(5))
    val c15 = listbu1.map(a => a(14))

    println(List(0,1,2,5,100,80).filter(a => (a > 0 && a < 100)))
    var feat13 = c15.filter ( str =>
      ((str.contains("到期还本") && !str.contains("到期还本息")) || str.contains("先息后本") || str.contains("分期付息") || str.contains("月息期本") || (str.contains("按") && str.contains("付息")))).length

    //val test03 = "大家按月月分期的话，按月分期"
    //val test04 = test03.indexOf("号")
    //println(test04)
    //println(test03.slice(test04-2, test04-1) == "按")


    def matchByString(str: String, word1: String, word2: String, word3: String): Boolean ={
      val strlen = str.length
      val startind = str.indexOf(word1)
      val endind1 = str.indexOf(word2)
      val endind2 = str.indexOf(word3)
      if ((endind1 - startind == 2) || (endind2 -startind == 2))
        true
      else false
    }
    //val test05 = matchByString("大家按月到期的话，按月分期", "按", "到期", "分期")
    //println(test05)

    //test01.foreach(println)
    println(listbu1.length)
    println(test00)
    //println(ArrayBuffer(10, 12).toList(0).toInt)
    println(listbu1.head.size)
    println(feat13)
    println(c15.distinct)
    //println(test01)

    //获取指定目录下的所文件，不包括该目录下的子文件夹的所有文件
    def getListOfFiles(dir: String):List[File] = {
      val direc = new File(dir)
      if (direc.exists && direc.isDirectory) {
        direc.listFiles.filter(_.isFile).toList
      }
      else List[File]()
    }

    def isDigital(str: String): Boolean = {
      str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$")
    }

    //val test00 = listbu1.slice(3564, 3565)
    //提取数字
    def do_DateSimpleDistill(strline: String): Int = {
      var str = strline.replaceAll("[^(0-9-: )]", "").trim()
      if (str == "") -1
      else if (isDigital(str)) str.toInt
      else -1
    }
    println(do_DateSimpleDistill("slr"))
    //println("slr".replaceAll("[^(0-9-/: )]", "").trim())
    //case class threetuples(filename: String, rowlen: Int, collen: Int)
    //获取指定目录下的文件，并按照一定的顺序进行排序
    val allfiles = getListOfFiles("D:/全部数据").sortBy(_.toString.length)
    println(allfiles)
    //println(allfiles.filter(a => (a.getName.contains("平台1") || a.getName.contains("平台2"))))
    //val src2 = CSVReader.open(allfiles(0))
    //val it2 = src2.iterator
    //println(it2.next)

    def replaceZeroByMinus(dou: Any): String= dou match {
      case 0 => -1.toString
      case _ => dou.toString
    }

    println(replaceZeroByMinus(-1))

    //对数据进行简单的统计
    def data_process_simpleStats(file: File) = {
      val src1 = CSVReader.open(file)
      val it = src1.iterator
      val listbu1: ArrayBuffer[Array[String]] = new ArrayBuffer()
      val headStr = it.next()

      if (!headStr.contains("RELEASETIME"))
        listbu1.append(headStr.toArray)

      while (it.hasNext) {
        listbu1.append(it.next().toArray)
      }
      val test00 = listbu1.map(_.size).distinct
      val test01 = listbu1.slice(1,2)
      //println(file.getName)
      //println(listbu1.length)
      //println(test00.toList(0).toInt)
      //List(file.getName, listbu1.length, test00.toList(0).toInt)
      println(file.getName, test01.head.mkString("_"))
      List(file.getName, listbu1.length, test01.toList(0))
    }
    //val simplestats = allfiles.map(data_process_simpleStats)
    //simplestats.foreach(println)
    /*
    val simplestats = allfiles.map(data_process_simpleStats)
    //simplestat.map(_.mkString(",")).foreach(println)

    //读取数据到指定文件中，设定ture：表示增加
    import java.io.PrintWriter
    //val outResult = new PrintWriter(new BufferedWriter(new FileWriter("d:/out000.txt", true)))
    val outResult = new PrintWriter(new BufferedWriter(new FileWriter("d:/out000.csv")))
    for (i <- simplestats.map(a => a.mkString(","))) outResult.println(i)
    outResult.close()
    */

    //对指定的列进行处理，转换为相应的特征值
    def data_process_feature(file: File) = {
      val src1 = CSVReader.open(file)
      val it = src1.iterator
      val listbu1: ArrayBuffer[Array[String]] = new ArrayBuffer()
      val headStr = it.next()

      if (!headStr.contains("RELEASETIME"))
        listbu1.append(headStr.toArray)

      while (it.hasNext) {
        listbu1.append(it.next().toArray)
      }

      if (listbu1.head.size > 20) {
        var c15 = listbu1.map(x => x(14))
        var c17 = listbu1.map(x => x(16))
        var c18 = listbu1.map(x => x(17))

        var cha13 = c15.filter ( str =>
          ((str.contains("到期还本") && !str.contains("到期还本息")) || str.contains("先息后本") || str.contains("分期付息") || str.contains("月息期本") || (str.contains("按") && str.contains("付息")))).length

        var cha14 = c15.filter ( str =>
          (str.contains("一次性") || str.contains("还本付息") || str.contains("到期还款") || str.contains("到期全额还款") || str.contains("额满即还") || str.contains("到期还本息"))).length

        //var cha15 = c15.filter ( str =>
        //  (str.contains("等额") || (str.contains("按") && str.contains("分期")) || (str.contains("按") && str.contains("到期")))).length

        var cha15 = c15.filter(str => (matchByString(str, "按", "到期", "分期") || str.contains("等额"))).length

        var cha16 = c17.filter (str => str.contains("男")).length

        var cha17 = c17.filter (str => str.contains("女")).length

        val temp18 = c18.map(do_DateSimpleDistill).filter(a => (a > 0 && a <100))

        var cha18 = temp18.sum

        var cha19 = temp18.filter(_ < 20).length

        var cha20 = temp18.filter(_ >= 20).filter(_ < 30).length

        var cha21 = temp18.filter(_ >= 30).filter(_ < 40).length

        var cha22 = temp18.filter(_ >= 40).filter(_ < 50).length

        var cha23 = temp18.filter(_ >= 50).length

        val linesCount = listbu1.length
        val temp18len = temp18.length
        val resul13 = BigDecimal(cha13 * 1.0 / linesCount).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
        val resul14 = BigDecimal(cha14 * 1.0 / linesCount).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
        val resul15 = BigDecimal(cha15 * 1.0 / linesCount).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
        val sum345 = resul13 + resul14 + resul15
        val resul16 = BigDecimal(cha16 * 1.0 / linesCount).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
        val resul17 = BigDecimal(cha17 * 1.0 / linesCount).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
        val sum67 = resul16 + resul17
        if (temp18len > 0) {
          val resul18 = BigDecimal(cha18 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val resul19 = BigDecimal(cha19 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val resul20 = BigDecimal(cha20 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val resul21 = BigDecimal(cha21 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val resul22 = BigDecimal(cha22 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val resul23 = BigDecimal(cha23 * 1.0 / temp18len).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble
          val sum823 = resul19 + resul20 + resul21 + resul22 + resul23
          List(file.getName, resul13, resul14, resul15, resul16, resul17, resul18, resul19, resul20, resul21, resul22, resul23, sum345, sum67, sum823)
        }
        else List(file.getName, resul13, resul14, resul15, resul16, resul17, -1, -1, -1, -1, -1, -1, -2, -2, -2)

      }
      else List(file.getName, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2)


      //println(file.getName)
      //println(listbu1.length)
      //println(test00.toList(0).toInt)
      //List(file.getName, listbu1.length)
    }

    val simpleResult = allfiles.map(data_process_feature)
    //simplestat.map(_.mkString(",")).foreach(println)

    //读取数据到指定文件中，设定ture：表示增加
    import java.io.PrintWriter
    //val outResult = new PrintWriter(new BufferedWriter(new FileWriter("d:/out000.txt", true)))
    val outResult = new PrintWriter(new BufferedWriter(new FileWriter("d:/out001.csv")))
    for (i <- simpleResult.map(a => a.map(replaceZeroByMinus).mkString(","))) outResult.println(i)
    //for (i <- simpleResult.map(a => a.mkString(","))) outResult.println(i)
    outResult.close()

  }
}
